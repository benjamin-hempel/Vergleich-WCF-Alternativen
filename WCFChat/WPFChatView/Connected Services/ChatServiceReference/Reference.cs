//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFChatView.ChatServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IChat", CallbackContract=typeof(WPFChatView.ChatServiceReference.IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendChat")]
        void SendChat(string name, string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendChat")]
        System.Threading.Tasks.Task SendChatAsync(string name, string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Join")]
        void Join(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Join")]
        System.Threading.Tasks.Task JoinAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Refresh")]
        void Refresh();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Refresh")]
        System.Threading.Tasks.Task RefreshAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/LogOut")]
        void LogOut();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/LogOut")]
        System.Threading.Tasks.Task LogOutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetChats", ReplyAction="http://tempuri.org/IChat/GetChatsResponse")]
        WCFChat.ChatInfos[] GetChats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetChats", ReplyAction="http://tempuri.org/IChat/GetChatsResponse")]
        System.Threading.Tasks.Task<WCFChat.ChatInfos[]> GetChatsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/ReceiveChat")]
        void ReceiveChat(WCFChat.ChatInfos chatInfos);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/RefreshUserList")]
        void RefreshUserList(string[] userList);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : WPFChatView.ChatServiceReference.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<WPFChatView.ChatServiceReference.IChat>, WPFChatView.ChatServiceReference.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendChat(string name, string text) {
            base.Channel.SendChat(name, text);
        }
        
        public System.Threading.Tasks.Task SendChatAsync(string name, string text) {
            return base.Channel.SendChatAsync(name, text);
        }
        
        public void Join(string name) {
            base.Channel.Join(name);
        }
        
        public System.Threading.Tasks.Task JoinAsync(string name) {
            return base.Channel.JoinAsync(name);
        }
        
        public void Refresh() {
            base.Channel.Refresh();
        }
        
        public System.Threading.Tasks.Task RefreshAsync() {
            return base.Channel.RefreshAsync();
        }
        
        public void LogOut() {
            base.Channel.LogOut();
        }
        
        public System.Threading.Tasks.Task LogOutAsync() {
            return base.Channel.LogOutAsync();
        }
        
        public WCFChat.ChatInfos[] GetChats() {
            return base.Channel.GetChats();
        }
        
        public System.Threading.Tasks.Task<WCFChat.ChatInfos[]> GetChatsAsync() {
            return base.Channel.GetChatsAsync();
        }
    }
}
